const { MongoClient } = require('mongodb');
const uri = "mongodb://localhost:27017"; // Change for your setup
const client = new MongoClient(uri);

async function run() {
  try {
    await client.connect();
    const db = client.db("library"); // Connect to database called 'library'

    // 1. Insert multiple book documents
    const books = [
      { title: "1984", author: "George Orwell", year: 1949, genres: ["Dystopian", "Political Fiction"], available: true },
      { title: "To Kill a Mockingbird", author: "Harper Lee", year: 1960, genres: ["Classic", "Historical"], available: true },
      { title: "The Great Gatsby", author: "F. Scott Fitzgerald", year: 1925, genres: ["Classic", "Novel"], available: false },
      { title: "Brave New World", author: "Aldous Huxley", year: 1932, genres: ["Dystopian", "Science Fiction"], available: true },
      { title: "The Catcher in the Rye", author: "J.D. Salinger", year: 1951, genres: ["Classic", "Novel"], available: false }
    ];
    await db.collection("books").insertMany(books);
    console.log("Books inserted");

    // 2. Find all books
    const allBooks = await db.collection("books").find().toArray();
    console.log("All books:", allBooks);

    // 3. Find books published after 1950
    const recentBooks = await db.collection("books").find({ year: { $gt: 1950 } }).toArray();
    console.log("Books published after 1950:", recentBooks);

    // 4. Find available dystopian books
    const dystopianBooks = await db.collection("books").find({ available: true, genres: "Dystopian" }).toArray();
    console.log("Available dystopian books:", dystopianBooks);

    // 5. Update availability of "The Great Gatsby"
    await db.collection("books").updateOne({ title: "The Great Gatsby" }, { $set: { available: true } });
    console.log("Updated availability of The Great Gatsby");

    // 6. Delete books published before 1930
    const deleteResult = await db.collection("books").deleteMany({ year: { $lt: 1930 } });
    console.log(`Deleted ${deleteResult.deletedCount} old books`);

    // 7. Aggregation: count books by availability
    const aggResult = await db.collection("books").aggregate([
      { $group: { _id: "$available", count: { $sum: 1 } } }
    ]).toArray();
    console.log("Book count by availability:", aggResult);

    // 8. Create index on author field
    await db.collection("books").createIndex({ author: 1 });
    console.log("Index created on author");

  } catch (err) {
    console.error(err);
  } finally {
    await client.close();
  }
}

run();
